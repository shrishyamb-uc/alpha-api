openapi: 3.0.2
tags:
  - name: Single Document Order
  - name: Multiple Document Order
  - name: Track Case
  - name: usage
  - name: App Webhook
  - name: App Webhook Settings
info:
  title: APP APIs
  description: APP APIs
  termsOfService: 'https://unicourt.com/terms-of-service'
  contact:
    name: UniCourt Support
    url: 'https://unicourt.com/developer-hub'
    email: support@unicourt.com
  version: V2
servers:
  - url: 'https://api.unicourt.com'
paths:
  /app/order:
    get:
      summary: Single Document Order
      tags:
        - Single Document Order
      parameters:
        - name: document_id
          in: query
          description: Unique ID of the case document.
          required: true
          schema:
            type: string
            minLength: 8
            maxLength: 255
            example: DOC_ID_123456358
        - name: timeout
          in: query
          description: Indicates the time to be taken for responding to this API request. If set 0 then api request will be reponseded immediately.
          schema:
            type: integer
            format: int32
            default: 30
            example: 0
      responses:
        '200':
          description: Single Document Order Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  document_order:
                    $ref: '#/components/schemas/document_order'
                nullable: false
              examples:
                Success Response:
                  value:
                    document_order:
                      webhook_id: stringstri
                      document_id: stringst
                      file_link: string
                      timeout: false
        '400':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    $ref: '#/components/schemas/error'
                nullable: false
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Service Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      operationId: getSingleDocumentOrder
      description: This API can be used to get the single document file from Court
      security:
        - api_key: []
    summary: Using this API you can order a single document and will return a document file lnk in case of document download happens with in timeout. If document download takes more time than time out period then you can use webhook id to get the file link to download document.
    description: API to order a single document of a case
  /app/cart:
    get:
      summary: View document list added in cart
      tags:
        - Multiple Document Order
      operationId: getDocumentsFromCart
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cart'
              examples:
                Success Response:
                  value:
                    cart:
                      amount: 200
                      count: 0
                      cart_hash: string
                      documents:
                        - document:
                            document_id: string
                            cost: 0
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Service Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      description: View all cart documents
      security:
        - api_key: []
    post:
      summary: Add documents to cart
      tags:
        - Multiple Document Order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                document_ids:
                  $ref: '#/components/schemas/document_ids'
              nullable: false
            examples:
              Request Body:
                value:
                  document_ids:
                    - DOC_ID_12452545
                    - DOC_ID_21566689
      security:
        - api_key: []
      responses:
        '200':
          description: 200 status Response
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cart'
              examples:
                Cart API success response:
                  value:
                    cart:
                      amount: 200
                      count: 0
                      cart_hash: string
                      documents:
                        - document:
                            document_id: string
                            cost: 50
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                example-1:
                  value:
                    code: INVOICE_ERROR
                    message: string
      operationId: addDocumentToCart
      description: This API can be used to add the documents into the Cart
    summary: Add documents to cart
    description: This API allows bulk document order API with cart system.
    delete:
      summary: Remove all documents from cart
      tags:
        - Multiple Document Order
      operationId: deleteAllDocumentsFromCart
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                example-1:
                  value:
                    code: INVOICE_ERROR
                    message: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Service Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      description: This API can be used to clear all the documents from Cart.
      security:
        - api_key: []
      parameters: []
  '/app/cart/{document_id}':
    parameters:
      - schema:
          type: string
        name: document_id
        in: path
        required: true
        description: Document ID
    delete:
      summary: Remove a document from the cart
      tags:
        - Multiple Document Order
      operationId: deleteDocumentFromCart
      responses:
        '200':
          description: Ok
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '503':
          description: Service Maintenance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      description: This API can be used to delete a document from the cart
      security:
        - api_key: []
  /app/cart/order:
    post:
      summary: Order documents present in cart
      tags:
        - Multiple Document Order
      operationId: orderCartDocuments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - api_key: []
      description: Order Documents present in Cart
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cart_hash:
                  type: string
        description: Order confirm with cart hash
  /app/track-case:
    get:
      summary: Get Tracked Cases API
      tags:
        - Track Case
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/track_cases'
      operationId: getTrackCase
      security:
        - api_key: []
      description: List all the tracked cases in an account.
    put:
      summary: Add or update tack case
      tags:
        - Track Case
      operationId: addOrUpdateTrackCase
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/track_case'
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples: {}
      description: Add or update track case
      security:
        - api_key: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/track_case'
        description: ''
  '/app/track-case/{case_id}':
    parameters:
      - schema:
          type: string
        name: case_id
        in: path
        required: true
    get:
      summary: Track Case Status of a Case
      description: Track Case Status of a Case
      tags:
        - Track Case
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/track_case'
              examples: {}
      operationId: gettrackCaseForCase
    delete:
      summary: Remove the case from track schedule
      tags:
        - Track Case
      operationId: removeTrackCase
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      description: Remove the case from track schedule
      security:
        - api_key: []
  /app/usage:
    get:
      summary: APP usage
      tags:
        - usage
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usage'
      operationId: getAppUsage
      description: Get APP Usage of current Month
      security:
        - api_key: []
  '/app/usage/{yyyy-mm}':
    parameters:
      - schema:
          type: string
        name: yyyy-mm
        in: path
        required: true
    get:
      summary: APP usage
      tags:
        - usage
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      operationId: getAppUsageForYearMonth
      description: Get the Usage for a specified Year and Month
      security:
        - api_key: []
  /app/webhook:
    get:
      summary: Get App Webhook data
      tags:
        - App Webhook
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks_metadata'
      operationId: getAppWebhook
      description: Get all recent webhook data
      security:
        - api_key: []
      parameters:
        - schema:
            type: string
            format: date
          in: query
          name: date
          description: ''
        - schema:
            type: string
            format: date
          in: query
          name: date_after
        - schema:
            type: string
            format: date
          in: query
          name: date_before
        - schema:
            type: string
            format: date
          in: query
          name: expiry
        - schema:
            type: string
            format: date
          in: query
          name: expiry_before
        - schema:
            type: string
            format: date
          in: query
          name: expiry_after
  '/app/webhook/{webhook_type}':
    parameters:
      - schema:
          type: string
        name: webhook_type
        in: path
        required: true
    get:
      summary: Get webhook data by webhook type
      tags:
        - App Webhook
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks'
              examples: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples: {}
      operationId: getWebhookDataForWebhookType
      description: Get webhook data for webhook type
      security:
        - api_key: []
      parameters:
        - schema:
            type: string
            format: date
          in: query
          name: date
        - schema:
            type: string
            format: date
          in: query
          name: date_before
        - schema:
            type: string
            format: date
          in: query
          name: date_after
        - schema:
            type: string
            format: date
          in: query
          name: expiry
        - schema:
            type: string
            format: date
          in: query
          name: expiry_before
        - schema:
            type: string
            format: date
          in: query
          name: expiry_after
        - schema:
            type: integer
          in: query
          name: page_number
  /app/webhook/settings:
    get:
      summary: Get App Webhook Settings
      tags:
        - App Webhook Settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook_settings'
      operationId: getAppWebhookSettings
      security:
        - api_key: []
      description: Get APP Webhook Settings
    put:
      summary: Update App Webhook Settings
      tags:
        - App Webhook Settings
      operationId: updateAppWebhookSettings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook_settings'
              examples: {}
      description: Update APP webhook settings
      security:
        - api_key: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhook_setting'
            examples: {}
        description: Update webhook setting
components:
  schemas:
    document_order:
      type: object
      required:
        - webhook_id
        - document_id
      properties:
        webhook_id:
          type: string
          description: Webhook ID is the unique id can be used to map the request and the webhook notification
          minLength: 10
          maxLength: 10
        document_id:
          type: string
          description: Unique ID of the case document
          minLength: 8
          maxLength: 255
        file_link:
          type: string
          description: Signed URL of the document
        timeout:
          type: boolean
          example: false
      nullable: false
      title: ''
      description: ''
    error:
      type: object
      minProperties: 2
      maxProperties: 2
      nullable: false
      x-examples: {}
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Different code for error
              enum:
                - PACER_CREDENTIAL_NOT_SET
                - INVOICE_ERROR
                - COST_ERROR
                - DOCUMENT_UNAVAILABLE
                - DOCUMENT_ALREADY_IN_CART
                - CART_LIMIT_REACHED
                - GENERIC
              example: GENERIC
            message:
              type: string
              description: Error message that describes the error code.
    document_ids:
      type: array
      items:
        type: string
        description: List of document ids to add it to cart for document order.
        minItems: 1
        maxItems: 20
        example: DOC_ID_12452545
      nullable: false
    cart:
      title: cart
      type: object
      x-examples: {}
      description: Cart Object
      properties:
        cart:
          type: object
          description: Cart Object
          required:
            - amount
            - count
            - cart_hash
            - documents
          properties:
            amount:
              type: number
              example: 200
              description: Total amount to be paid for document order present in cart
              format: float
            count:
              type: integer
              description: Unique cart hash that need to be passed during document order checkout
            cart_hash:
              type: string
              description: Unique cart has that is generated for document order
            documents:
              type: array
              items:
                type: object
                properties:
                  document:
                    type: object
                    required:
                      - document_id
                      - cost
                    properties:
                      document_id:
                        type: string
                      cost:
                        type: number
                        format: float
                        example: 50
                required:
                  - document
      required:
        - cart
    order:
      title: order
      type: object
      properties:
        order:
          type: object
          required:
            - message
            - amount
            - webhook_id
          properties:
            message:
              type: string
            amount:
              type: number
              format: float
              example: 200
            webhook_id:
              type: string
      required:
        - order
    track_cases:
      title: track_cases
      type: object
      description: Track Cases
      properties:
        total_cases:
          type: integer
        page:
          type: integer
        track_cases:
          type: array
          items:
            $ref: '#/components/schemas/track_case'
        next_page:
          type: string
          nullable: true
    track_case:
      title: track_case
      type: object
      description: Track Case
      properties:
        track_case:
          type: object
          required:
            - case_id
            - schedule
          properties:
            case_id:
              type: string
            schedule:
              type: string
      required:
        - track_case
    usage:
      type: object
      properties:
        usage:
          type: object
          properties:
            start_date:
              type: string
            end_date:
              type: string
            case:
              type: integer
            update_case:
              type: integer
            document_order:
              type: integer
    webhooks_metadata:
      title: webhooks metadata
      type: object
      properties:
        id:
          type: object
          properties:
            case_webhook:
              type: object
              properties:
                count:
                  type: integer
                link:
                  type: string
            document_order_webhook:
              type: object
              properties:
                count:
                  type: integer
                link:
                  type: string
            x_webhook:
              type: object
              properties:
                count:
                  type: integer
                link:
                  type: string
    webhooks:
      title: webhooks
      type: object
      x-examples: {}
      properties:
        total:
          type: integer
        count:
          type: integer
        page_number:
          type: integer
        webhooks:
          type: array
          items:
            type: object
            properties:
              webhook_type:
                type: object
                properties:
                  date:
                    type: string
                  expiry:
                    type: string
                  webhook_id:
                    type: string
                  case_id:
                    type: string
                  document_id:
                    type: string
                  file_link:
                    type: string
        next_page:
          type: string
      description: Webhook data model for particular type
    webhook_settings:
      title: webhook_settings
      type: object
      properties:
        webhook_settings:
          type: object
          properties:
            default:
              type: object
              properties:
                enabled:
                  type: boolean
                url:
                  type: string
                http_basic_auth:
                  type: string
                notify_email:
                  type: string
            case_webhook:
              type: object
              properties:
                enabled:
                  type: boolean
            document_order_webhook:
              type: object
              properties:
                enabled:
                  type: boolean
            x_webhook:
              type: object
              properties:
                enabled:
                  type: boolean
                url:
                  type: string
                http_basic_auth:
                  type: string
                notify_email:
                  type: string
            track_case_webhook:
              type: object
              properties:
                one_per_schedule:
                  type: boolean
                enabled:
                  type: boolean
                url:
                  nullable: true
    webhook_setting:
      title: webhook_setting
      type: object
      properties:
        webhook_settings:
          type: object
          properties:
            update_case_webhook:
              type: object
              properties:
                enabled:
                  type: boolean
                url:
                  type: string
                http_basic_auth:
                  type: string
                notify_email:
                  type: string
  securitySchemes:
    api_key:
      name: api_key
      type: apiKey
      in: header
security: []
